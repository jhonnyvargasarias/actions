name: 'Generate Next Version'
description: 'Generate the next version based on the last tag'

inputs:
  github_token:
    description: 'GitHub token'
    required: true

  max_patch_version:
    description: 'The maximum patch version'
    required: true

  max_minor_version:
    description: 'The maximum minor version'
    required: true

  is_patch_version_limited:
    description: 'Whether the patch version is limited'
    required: false
    default: true

  increment_minor_version:
    description: 'Whether to increment the minor version'
    required: false
    default: false

  increment_major_version:
    description: 'Whether to increment the major version'
    required: false
    default: false

outputs:
  next_version:
    description: 'The next version based on the last tag'
    value: ${{ steps.generate_next_version.outputs.next_version }}

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Get last tag
      id: get_last_tag
      uses: ./get-last-tag
      with:
        github_token: ${{ inputs.github_token }}

    - name: Generate next version
      id: generate_next_version
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const lastTag = JSON.parse('${{ steps.get_last_tag.outputs.last_tag }}');
          const version = lastTag ? lastTag.name : '0.0.0';
          const [major, minor, patch] = version.split('.').map(Number);

          let nextPatch = (patch || 0) + 1;
          let nextMinor = minor || 0;
          let nextMajor = major || 0;

          if(${{ inputs.is_patch_version_limited }}) {
            if (
              ${{ inputs.increment_major_version }} ||
              ${{ inputs.increment_minor_version }} ||
              nextPatch > ${{ inputs.max_patch_version }}
            ) {
              nextPatch = 0;
              nextMinor += 1;
            }

            if (${{ inputs.increment_major_version }} || nextMinor > ${{ inputs.max_minor_version }}) {
              nextMinor = 0;
              nextMajor += 1;
            }
          }

          const nextVersion = `${nextMajor}.${nextMinor}.${nextPatch}`;

          core.notice(`Next version: ${nextVersion}`);
          core.setOutput('next_version', nextVersion);
